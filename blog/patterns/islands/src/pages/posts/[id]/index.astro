---
import Layout from "@/layouts/Layout.astro"
import Comments from "@/components/Comments.vue"
import Comment from "@/components/Comment.vue"
import { useDbClient, makeError } from "@/utils/server.js"
import MarkdownIt from "markdown-it"

const db = useDbClient()

const { id } = Astro.params

if (Astro.request.method === "POST") {
    const data = await Astro.request.formData()
    if (data.get("action") === "delete") {
        db.query("delete from post where id = $1", [id])
        return Astro.redirect("/posts")
    }
}

const { rows } = await db.query(
    `select post.id,
            title,
            author,
            content,
            post.created,
            post.modified,
            categoryid,
            category.name as category
     from post
              join category on post.categoryid = category.id
     where post.id = $1`, [id])

if (!rows.length)
    return makeError(404, "Not found")

const post = rows[0]

const { rows: comments } = await db.query(
    `select id, author, content, created, modified
     from Comment
     where postid = $1
     order by created`, [id])

const md = new MarkdownIt({ linkify: true })

let error = null

function formatDate1(dateStr) {
    return new Date(dateStr).toLocaleDateString("en-UK",
        { weekday: "long", day: "numeric", month: "long", year: "numeric" })
}

function formatDate2(dateStr) {
    return new Date(dateStr).toLocaleString("en-GB",
        { day: "numeric", month: "long", year: "numeric", hour: "numeric", minute: "2-digit" })
}
---

<Layout>
    <div class="container">
        <header class="post-header">
            <h1>{post.title}</h1>

            <a class="button" href={`/categories/${post.categoryid}`}>
                #{post.category}
            </a>
            <p class="author">by <span class="name">{post.author}</span></p>
            <p class="date">
                {formatDate1(post.created)}
                {post.created.getTime() !== post.modified.getTime() &&
                        <span>(last modified {formatDate2(post.modified)})</span>}
            </p>
            <div class="actions">
                <a class="button" href={`/posts/${id}/edit`}>Edit post</a>
                <form method="post" id="deleteForm">
                    <input type="hidden" name="action" value="delete"/>
                    <button type="submit">Delete post</button>
                </form>
            </div>
        </header>

        <div class="content" set:html={md.render(post.content)}></div>

        <footer class="post-footer">
            <Comments commentsCount={comments.length} postId={Astro.params.id} client:visible>
                {comments.map(comment =>
                        <Comment comment={comment}/>)}
            </Comments>
        </footer>
    </div>
</Layout>

<script defer>
    document.getElementById("deleteForm").addEventListener("submit", event => {
        event.preventDefault()
        if (confirm("Are you sure you want to delete this post? (No undo)"))
            event.target.submit()
    })
</script>

<style>
    .container {
        display: flex;
        flex-direction: column;
    }

    .container > * {
        width: 100%;
    }

    .post-header, .post-footer {
        background: aliceblue;
        overflow: auto;
        border-bottom: 1px cornflowerblue solid;
        border-top: 1px cornflowerblue solid;
        margin: 0 -1.5em;
        padding: 0 1.5em;
    }

    .post-header .actions {
        text-align: right;
        margin-bottom: 1em;
    }

    .content {
        flex-grow: 1;
        font-family: serif;
        max-width: 800px;
        margin: 2em auto 3em;
    }

    .content :global(p) {
        text-align: justify;
    }

    .content :global(img) {
        max-width: min(600px, 100%);
        max-height: 600px;
        margin: auto;
        display: block;
    }

    #deleteForm {
        display: inline;
    }
</style>
